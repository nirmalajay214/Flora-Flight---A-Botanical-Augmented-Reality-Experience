//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/Dragon/DragonInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DragonInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DragonInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DragonInputActions"",
    ""maps"": [
        {
            ""name"": ""DragonActionMaps"",
            ""id"": ""547f135a-69ef-476e-89aa-33abd4618825"",
            ""actions"": [
                {
                    ""name"": ""MoveForwardSide"",
                    ""type"": ""Value"",
                    ""id"": ""34cbb3ca-0c42-4625-b6fc-612acde8b10f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""1e17eb4e-84d2-4e1f-908a-02ec9f99ebd9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveUpDown"",
                    ""type"": ""Value"",
                    ""id"": ""45b6212c-0df0-4f66-b874-b0fdc3b9f7e0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fbbe79b4-902c-4a25-9c0f-653fe912a8df"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForwardSide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93a48d43-743c-4c67-b8a5-5e7bacdea7e6"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4e9e773-dfc1-4350-9421-9ae67ef83116"",
                    ""path"": ""<Touchscreen>/touch0/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DragonActionMaps
        m_DragonActionMaps = asset.FindActionMap("DragonActionMaps", throwIfNotFound: true);
        m_DragonActionMaps_MoveForwardSide = m_DragonActionMaps.FindAction("MoveForwardSide", throwIfNotFound: true);
        m_DragonActionMaps_Interact = m_DragonActionMaps.FindAction("Interact", throwIfNotFound: true);
        m_DragonActionMaps_MoveUpDown = m_DragonActionMaps.FindAction("MoveUpDown", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DragonActionMaps
    private readonly InputActionMap m_DragonActionMaps;
    private List<IDragonActionMapsActions> m_DragonActionMapsActionsCallbackInterfaces = new List<IDragonActionMapsActions>();
    private readonly InputAction m_DragonActionMaps_MoveForwardSide;
    private readonly InputAction m_DragonActionMaps_Interact;
    private readonly InputAction m_DragonActionMaps_MoveUpDown;
    public struct DragonActionMapsActions
    {
        private @DragonInputActions m_Wrapper;
        public DragonActionMapsActions(@DragonInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveForwardSide => m_Wrapper.m_DragonActionMaps_MoveForwardSide;
        public InputAction @Interact => m_Wrapper.m_DragonActionMaps_Interact;
        public InputAction @MoveUpDown => m_Wrapper.m_DragonActionMaps_MoveUpDown;
        public InputActionMap Get() { return m_Wrapper.m_DragonActionMaps; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DragonActionMapsActions set) { return set.Get(); }
        public void AddCallbacks(IDragonActionMapsActions instance)
        {
            if (instance == null || m_Wrapper.m_DragonActionMapsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DragonActionMapsActionsCallbackInterfaces.Add(instance);
            @MoveForwardSide.started += instance.OnMoveForwardSide;
            @MoveForwardSide.performed += instance.OnMoveForwardSide;
            @MoveForwardSide.canceled += instance.OnMoveForwardSide;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @MoveUpDown.started += instance.OnMoveUpDown;
            @MoveUpDown.performed += instance.OnMoveUpDown;
            @MoveUpDown.canceled += instance.OnMoveUpDown;
        }

        private void UnregisterCallbacks(IDragonActionMapsActions instance)
        {
            @MoveForwardSide.started -= instance.OnMoveForwardSide;
            @MoveForwardSide.performed -= instance.OnMoveForwardSide;
            @MoveForwardSide.canceled -= instance.OnMoveForwardSide;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @MoveUpDown.started -= instance.OnMoveUpDown;
            @MoveUpDown.performed -= instance.OnMoveUpDown;
            @MoveUpDown.canceled -= instance.OnMoveUpDown;
        }

        public void RemoveCallbacks(IDragonActionMapsActions instance)
        {
            if (m_Wrapper.m_DragonActionMapsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDragonActionMapsActions instance)
        {
            foreach (var item in m_Wrapper.m_DragonActionMapsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DragonActionMapsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DragonActionMapsActions @DragonActionMaps => new DragonActionMapsActions(this);
    public interface IDragonActionMapsActions
    {
        void OnMoveForwardSide(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnMoveUpDown(InputAction.CallbackContext context);
    }
}
